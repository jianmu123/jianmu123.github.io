<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jianmu123.github.io/</id>
    <title>Personal blog</title>
    <updated>2020-10-04T15:35:11.930Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jianmu123.github.io/"/>
    <link rel="self" href="https://jianmu123.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jianmu123.github.io/images/avatar.png</logo>
    <icon>https://jianmu123.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Personal blog</rights>
    <entry>
        <title type="html"><![CDATA[js基础3]]></title>
        <id>https://jianmu123.github.io/post/js-ji-chu-3/</id>
        <link href="https://jianmu123.github.io/post/js-ji-chu-3/">
        </link>
        <updated>2020-10-04T15:32:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="js中的操作语句判断-循环">js中的操作语句：判断、循环</h2>
<blockquote>
<p>判断 ：</p>
<p>​			if/else if/else</p>
<p>​			三元运算符</p>
<p>​			switch case</p>
</blockquote>
<p>三元运算符： 条件？条件成立执行的事情：不成立执行的事情；</p>
<p>1：如果处理的事情多，我们用括号包起来，每一件事情用逗号分隔.</p>
<p>2:如果不需要处理事情，可以使用null/undefined占位.</p>
<p>上面2句说法的解释：</p>
<pre><code class="language-javascript">例如用if写一个判断,这里做了2件事情，并且不满足的时候什么事情都不做：
if (a&gt;0&amp;&amp;a&lt;10){
   a++;
   console.log(a);
}
它的三元运算符这样写：
a&gt;0&amp;&amp;a&lt;10 ? (a++,console.log(a)):null; 
//1：如果处理的事情多，我们用括号包起来，每一件事情用逗号分隔2:如果不需要处理事情，可以使用null/undefined占位.
</code></pre>
<h2 id="js中的内存关系">js中的内存关系：</h2>
<p><img src="https://jianmu123.github.io//post-images/1601825663184.PNG" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1601825668128.png" alt="" loading="lazy"></p>
<h2 id="js中的函数">js中的函数</h2>
<blockquote>
<p>函数中的返回值：<br>
函数执行的时候，函数体内部创建的变量我们是无法获取和操作的，如果想要获取内部信息，需要使用return返回机制。返回的一定是一个值，不是变量。</p>
</blockquote>
<pre><code class="language-javascript">function sum(a,b){
    let result=a+b;
    //return的一定是值：此处是把result变量存储的值返回给外面
    return result;
}
sum(10,20);//是这个整体值为30，不是result值为30 
console.log(result);//会报错 Uncaught ReferenceError: result is not defined

如果没有写return，调用函数的默认返回值是undefined.
</code></pre>
<blockquote>
<p>函数体中遇到return 则后面的代码不会再运行。</p>
</blockquote>
<h2 id="匿名函数">匿名函数</h2>
<p>匿名函数分为：函数表达式和自执行函数</p>
<ul>
<li>函数表达式：把一个匿名函数本身作为值赋值给其他东西，这种函数一般不是手动触发，而是靠其他驱动程序触发执行（例如：触发某个事件的时候执行）</li>
</ul>
<p>如： document.body.onclick=function(){};</p>
<p>setTimeout(function(){},1000);//设置定时器，1000ms后执行匿名函数</p>
<ul>
<li>自执行函数： 能创建完一个匿名函数，紧接着就把当前函数加<strong>小括号</strong>执行</li>
</ul>
<p>如：</p>
<p>（function（n）{</p>
<p>​    //n=100</p>
<p>​     }）(100);</p>
<p>//这里的（100）执行了匿名函数，得到了n=100；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js基础2]]></title>
        <id>https://jianmu123.github.io/post/js-ji-chu-2/</id>
        <link href="https://jianmu123.github.io/post/js-ji-chu-2/">
        </link>
        <updated>2020-10-04T15:31:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="js中的数据类型检测">js中的数据类型检测</h2>
<ul>
<li>typeof[val]:用来检测数据类型的运算符</li>
<li>instanceof :用来检测当前实列是否属于某个类</li>
<li>constructor：基于构造函数检测数据类型(也是基于类的方式)</li>
<li>Object.prototype.toString.call（）：检测数据类型最好的办法</li>
</ul>
<h4 id="一基于typeof检测的结果">一：基于typeof检测的结果</h4>
<ul>
<li>都是字符串</li>
<li>字符串中包含的是对应类型</li>
</ul>
<p>例如：console .log(typeof typeof typeof[]);</p>
<p>​       首先 typeof [] 返回 ”object“</p>
<p>​		然后 typeof ”object“ 返回 ”string“</p>
<p>​		最后typeof &quot;string&quot;返回”string“</p>
<p>​	   typeof NaN;//”number“</p>
<pre><code>  typeof null;//“object”

typeof {};//”object“

typeof [];//“object”

typeof /^$/;//”object“
</code></pre>
<p>typeof 的局限性：</p>
<p>​     -  typeof null的结果是object ，但是null不是对象只是空对象指针</p>
<p>​     -  typeof 无法细分出当前值是普通对象还是数组对象等，因为只要检测的是对象数据类型都返回”object“</p>
<h4 id="二-基于instanceof检测结果">二： 基于instanceof检测结果</h4>
<p>instanceof只能检测引用数据类型，对于基本类型不生效,返回值是true/false。并且它不能用于检测null和undefined。</p>
<pre><code class="language-javascript">例如：

 		console.log(&quot;1&quot; instanceof String); //false

 		console.log(1 instanceof Number); //false

 		console.log(true instanceof Boolean); //false

 		console.log([]  instanceof Array); //true

 		console.log({} instanceof Object); //true

 		console.log(function(){} instanceof Function); //true

</code></pre>
<h4 id="三-基于constructor检测结果">三： 基于constructor检测结果</h4>
<p>先看一下用法：</p>
<pre><code class="language-javascript">console.log((&quot;1&quot;).constructor===String);//true
console.log((1).constructor===Number;//true
console.log((true).constructor===Boolean);//true
console.log(([]).constructor===Array);//true
console.log(({}).constructor===Object);//true
console.log((function(){}).constructor===Fuction);//true
</code></pre>
<p>撇去null和undefined，可以看出constructor能用于检测js的基本类型和引用类型。但是设计到原型和继承的时候便会出现问题。如下</p>
<pre><code class="language-javascript">function fun(){};
    fun.prototype=new Array();
    let f=new fun();
	console.log(f.constructor===fun);//false
	console.log(f.constructor===Array);//ture
    
</code></pre>
<p>在这里，我们先是定义了一个函数fun，并将该函数的原型指向了数组，同时，声明了一个f为fun的类型，然后利用constructor进行检测时，结果如下：false  true;</p>
<h3 id="小结撇去null和undefinedconstructor能用于检测js的基本类型和引用类型但当对象的原型更改之后constructor便失效了">小结：撇去null和undefined，constructor能用于检测js的基本类型和引用类型，但当对象的原型更改之后，constructor便失效了。</h3>
<h4 id="四objectprototypetostringcall">四：Object.prototype.toString.call()</h4>
<p>用法：</p>
<pre><code>  ```javascript
</code></pre>
<p>console.log(Object.prototype.toString.call(&quot;str&quot;));<br>
console.log(Object.prototype.toString.call(1));<br>
console.log(Object.prototype.toString.call(true));<br>
console.log(Object.prototype.toString.call(null));<br>
console.log(Object.prototype.toString.call(undefined));<br>
console.log(Object.prototype.toString.call([]));<br>
console.log(Object.prototype.toString.call({}));<br>
console.log(Object.prototype.toString.call(function(){}));<br>
```</p>
<p>结果：</p>
<p>[Object String]</p>
<p>[Object Number]</p>
<p>[Object Boolean]</p>
<p>[Object null]</p>
<p>[Object undefined]</p>
<p>[Object Array]</p>
<p>[Object Object]</p>
<p>[Object Function]</p>
<p>这样一看，似乎能满足js的所有数据类型，那我们看下继承之后是否能检测出来</p>
<pre><code class="language-javascript">function fun(){};
    fun.prototype=new Array();
    let f=new fun();
	console.log(object.prototype.toString.call(fun));
	console.log(object.prototype.toString.call(f));
</code></pre>
<p>结果：</p>
<p>[Object Function]</p>
<p>[Object Object]</p>
<h3 id="可以看出objectprototypetostringcall可用于检测js所有的数据类型">可以看出，Object.prototype.toString.call()可用于检测js所有的数据类型。</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS基础1]]></title>
        <id>https://jianmu123.github.io/post/js-ji-chu-1/</id>
        <link href="https://jianmu123.github.io/post/js-ji-chu-1/">
        </link>
        <updated>2020-10-03T14:16:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="js做客户端语言">JS做客户端语言</h3>
<blockquote>
<p>按照相关的js语法，再去操作页面的元素。4，有时还需要操作浏览器里面的一些功能》</p>
<ul>
<li>
<p>ECSAScript3/5/6...：JS的语法规范（变量、数据类型、操作语句等等）。</p>
</li>
<li>
<p>DOM(document object model):文档对象模型，提供一些JS的属性方法，用来操作页面的DOM元素。</p>
</li>
<li>
<p>BOM(browser object model):浏览器对象模型，提供一些JS的属性和方法，用来操作浏览器（比如：刷新，关闭等等）。</p>
</li>
</ul>
</blockquote>
<h3 id="js中的变量-variable">JS中的变量 variable</h3>
<blockquote>
<p>变量：可变的量，在编程语言中，变量就是一个名字，用来存储和代表不同的值的东西。</p>
</blockquote>
<pre><code class="language-javascript">//ES3
   var a=12;
 	   a=13;
   console.log(a);//=&gt;输出的a的值是13
//ES6
 	let b=100;
		b=200;
  const c=1000;
		c=2000;//会报错，因为const存储的值不能被修改（可以理解为常量）。
//创建函数也相当于创建变量
function fu(){}
//ES6中创建类也相当于在创建变量
class A{}
//ES6的模块导入也可以创建变量
import B from './B.js';//导入一个模块，创建一个B来存储
//Symbol创建唯一值
let n=Symbol(100);
let m=Symbol(100);
console.log(m==n);//false,因为是创建的唯一值
</code></pre>
<h3 id="js的命名规范">JS的命名规范</h3>
<ul>
<li>
<p>严格区分大小写</p>
</li>
<li>
<p>使用数字、字母、下划线、$,数字不能开头</p>
</li>
<li>
<p>使用驼峰命名法：首写字母小写，其余每一个有意义单词首字母大写</p>
</li>
</ul>
<h3 id="js中常用的数据类型">JS中常用的数据类型</h3>
<p>— 基本数据类型</p>
<ul>
<li>数字类型number（NaN也是数字类型）</li>
<li>字符串类型string</li>
<li>布尔类型boolean</li>
<li>空对象指针null</li>
<li>未定义类型undefined</li>
</ul>
<p>—引用数据类型</p>
<ul>
<li>
<p>对象数据类型object</p>
<p>​    {}：普通对象</p>
<p>​    []：数组对象</p>
<p>​    /^$/:正则对象</p>
<p>​    Math数学函数对象</p>
<p>日期对象</p>
<p>、、、</p>
</li>
<li>
<p>函数数据类型function</p>
</li>
</ul>
<h3 id="number数字类型">number数字类型</h3>
<blockquote>
<p>包含：常规数字和NaN</p>
</blockquote>
<h4 id="nan">NaN:</h4>
<p>不是一个数字，和任何值都不相等（包括自己）。NaN !=NaN，所以我们不能用相等的方式来判断是否是一个有效数字。</p>
<h4 id="isnan">isNaN</h4>
<blockquote>
<p>检测一个值是否是非有效数字，如果不是有效数字返回true，否则返回false。</p>
<p>语法：isNaN（[val]）</p>
</blockquote>
<pre><code class="language-console.log(isNaN(10));//false">console.log(isNaN(10));//false

console.log(isNaN('AA'));//true
//机制：Number('AA')=&gt;NaN
注意：
console.log(isNaN('10'));//false
//机制：Number('10')=&gt;10
isNaN的使用机制：首先看这个值是不是数字类型，如果不是则会使用Number()这个方法把值转换数字类型，然后再检测

</code></pre>
<h3 id="字符串转数字">字符串转数字</h3>
<blockquote>
<p>Number()方法把字符串转换为数字，只要字符串中包含任意一个非有效数字字符，结果都是NaN，空字符串会转换为数字0。</p>
</blockquote>
<pre><code class="language-javascript">console.log(Number('12.5'));//12.5
console.log(Number('12.5px'));//NaN
console.log(Number(''));//0
</code></pre>
<h3 id="布尔转数字">布尔转数字</h3>
<p>同样使用Number()方法，ture=&gt;1;false=&gt;0。</p>
<h3 id="空对象和undefined转数字">空对象和undefined转数字</h3>
<pre><code class="language-javascript">console.log(Number(null));//0

console.log(Number(undefined));//NaN
</code></pre>
<h3 id="引用数据类型转数字">引用数据类型转数字</h3>
<p>把引用数据类型先通过toString()方法转换为字符串，然后再通过Number()方法转换为数字。</p>
<pre><code class="language-javascript">对象
console.log(Number({number:'xxx'}));//NaN
console.log(Number({}));//NaN
//toString()方法转为object
数组
console.log(Number([]);//0
//toSting()转为空字符串&quot;&quot;,然后Number()把它转为0
console.log(Number([12]);//12
//toSting()转为&quot;12&quot;
console.log(Number([12,23]);//NaN
//toSting()转为&quot;12,23&quot;,含有非有效数字字符（逗号）
</code></pre>
<h3 id="把其他类型值转换为数字类型">把其他类型值转换为数字类型</h3>
<ul>
<li>Number([val])</li>
<li>parseInt([val]，[进制])  //返回整数</li>
<li>parseFloat([val]，[进制]) //返回浮点数<br>
后面两种方法对字符串来说是从左到右一次查找有效字符，直到遇到非有效字符，就停止查找（无论后面是否还有有效数字都会停止），然后返回查找的数字。</li>
</ul>
<pre><code class="language-javascript">let str='12.5px'
console.log(Number(str);// NaN
console.log(parseInt(tsr));//12
console.log(parseFloat(str));//12.5
</code></pre>
<p>== 进行比较的时候，可能会把其他类型转换为数字<br>
比如：console.log('10'==10);//true</p>
<h3 id="其他类型转换为字符串">其他类型转换为字符串</h3>
<ul>
<li>[val].toString()</li>
<li>字符串拼接</li>
</ul>
<p>null和undefined是禁止直接使用toString的 。</p>
<p>加号有四则运算的功能和字符串拼接的功能，只有遇到字符串才是字符串拼接的功能。</p>
<pre><code class="language-javascript">console.log('10'+10);  =&gt;'1010'
let a=10+null+true+[12]+undefined+'珠峰'+null+[]+10+false;
/*
 10+null=10+0=10
 10+true=10+1=11
 11+[12]=11+'12'='1112' 遇到字符串直接进行字符串拼接，之后所有+号都是拼接
 '1112'+undefined='1112undefined'
 '1112undefined'+'珠峰'='1112undefined珠峰'
 '1112undefined珠峰'+null='1112undefined珠峰null'
 '1112undefined珠峰null'+[]='1112undefined珠峰null'  空数组转为空字符串
 '1112undefined珠峰null'+10+false='1112undefined珠峰null10false'
*/
console.log(a); =&gt;'1112undefined珠峰null10false'
</code></pre>
<h2 id="boolean布尔数据类型">boolean布尔数据类型</h2>
<blockquote>
<p>只有两个值 true/false</p>
</blockquote>
<h3 id="把其它类型值转换为布尔类型">把其它类型值转换为布尔类型</h3>
<blockquote>
<p>只有0、NaN、''、null、undefined这5个值转换为false（没有任何其他情况）</p>
</blockquote>
<pre><code class="language-javascript">console.log(Boolean(0));//false
console.log(Boolean(''));//false
console.log(Boolean(' '));//ture,因为里面不是空字符串，而是一个空格
console.log(Boolean(null));//false
console.log(Boolean(undefined));//false
console.log(Boolean(NaN));//false
console.log(Boolean([]));//ture
console.log(Boolean([12]));//ture
</code></pre>
<p>转换方法：</p>
<ul>
<li>Boolean()</li>
<li>!或则!! （ 一个！表示取反，2个表示取2次反）</li>
<li>条件判断</li>
</ul>
<h2 id="object对象数据类型-普通对象">object对象数据类型-普通对象</h2>
<blockquote>
<p>{[key]:[value],....} 任何一个对象都是有零到多对键值对（属性名:属性值）组成的（并且属性名不能重复）。</p>
</blockquote>
<pre><code class="language-javascript">let person={
    name: '孙悟空',
    age:18,
    height:'185cm'
}
//获取值：
      对象.属性名 如：person.name
或则： 对象[属性名] 如：person['name']
属性名是数字或则字符串格式，如果属性名是数字则只能使用第二种方法获取

真删除：delete.person.age;
假删除：person.age=null;(属性还在，值为空)
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1601734652296.PNG" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS3 One]]></title>
        <id>https://jianmu123.github.io/post/css3-one/</id>
        <link href="https://jianmu123.github.io/post/css3-one/">
        </link>
        <updated>2020-10-01T06:50:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一盒子模型">一：盒子模型</h1>
<p>以前的盒子的大小是盒子的本身加上padding+border+margin，因此盒子的大小不会是我们设置的大小，这样还需要去计算来设置我们想要的盒子大小，现在css3添加了盒子模型，这样的盒子大小就是我们设置的盒子大小。只需要在盒子的样式中添加：box-sizing：border-box；</p>
<h1 id="二盒子阴影">二：盒子阴影</h1>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1601535646649.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML5 Two]]></title>
        <id>https://jianmu123.github.io/post/html5-two/</id>
        <link href="https://jianmu123.github.io/post/html5-two/">
        </link>
        <updated>2020-10-01T05:27:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一进度条">一：进度条</h1>
<pre><code class="language-HTML">&lt;progress&gt; 和&lt;meter&gt; 标签是 HTML 5 中的新标签。
请结合 &lt;progress&gt; 标签与 JavaScript 一同使用，来显示任务的进度。
属性：max，min
&lt;meter&gt; 标签定义度量衡。仅用于已知最大和最小值的度量。
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1601530514020.png" alt="" loading="lazy"></figure>
<h1 id="二上传文件及时预览的制作">二：上传文件及时预览的制作</h1>
<p>及时：当用户选择完图片后，立即进行预览的处理<br>
预览：通过文件读取对象的readAsDataURL()完成。<br>
上传文件表单属性：type=&quot;file&quot;。<br>
<img src="https://jianmu123.github.io//post-images/1601531304633.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1601531310321.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1601531315021.png" alt="" loading="lazy"></p>
<h1 id="三拖拽">三：拖拽</h1>
<p>拖拽的事件：<br>
ondrag  :应用于拖拽元素，整个拖拽过程都会调用。<br>
ondragstart  :应用于拖拽元素，拖拽开始时调用。<br>
ondragleave :应用于拖拽元素，鼠标离开拖拽元素时调用。<br>
ondragend :应用于拖拽元素，拖拽结束时调用。</p>
<h1 id="四存储方式">四：存储方式</h1>
<p>1：sessionStorage：<br>
特点：<br>
存储数据到本地，存储容量位5mb左右。<br>
这个数据本质时存储在当前页面的内存种。<br>
它生命周期位关闭当前页面就会自动清除数据。<br>
2：localStorage：<br>
特点：<br>
存储大小20mb左右。<br>
不会随着浏览器关闭而消失，它会永久保存。如果想清除，必须手动清。<br>
它们的属性方法：<br>
setItem(key,value):存储数据，以键值对的方式存储.<br>
getItem(key):获取数据，通过指定的名称键值获取对应的value值。<br>
removeItem(key):删除输出，输出指定名称的对应value值。<br>
clear():清空所有存储的内容。<br>
<img src="https://jianmu123.github.io//post-images/1601534950413.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML5 one]]></title>
        <id>https://jianmu123.github.io/post/html5-one/</id>
        <link href="https://jianmu123.github.io/post/html5-one/">
        </link>
        <updated>2020-09-28T14:27:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1html5新增语义化标签">1:HTML5新增语义化标签</h1>
<pre><code class="language-HTML"> &lt;header&gt;,&lt;footer&gt;, &lt;article&gt;, &lt;section&gt;,&lt;nav&gt;,&lt;main&gt;
</code></pre>
<h1 id="2html5新的表单控件">2:HTML5新的表单控件:</h1>
<pre><code class="language-javascript">邮箱：type=&quot;email&quot; 
提供了默认的电子邮箱的完整验证：要求必须含有@符号，同时必须包含服务器名称,如果不能满足验证，则会阻止当前的数据提交。
电话：type=&quot;tel&quot;
tel并不是用来验证手机号的，它的本质目的是能够在移动端打开数字键盘，意味着数字键盘限制了用户只能输入数字。
网址：type=&quot;url&quot;
验证是否是一个合法的网址（必须包含http://）
数量：type=&quot;number&quot;
number:只能输入数字（可以包含小数点）,不能输入其他字符
可以设置max：最大值，min：最小值，value：默认值
输入：type=&quot;search&quot;
提供一个更好的输入化体验，即：在表单框最后有一个×，点击了可以直接删除所有内容
范围 :typr=&quot;range&quot;
可以设置max，min和默认值value
颜色：type=&quot;color&quot;
可以选择颜色
日期时间相关：
时分秒：type=&quot;time&quot; 年月日：type=&quot;date&quot;  年月日时分秒：type=&quot;datetime-local&quot;
月份：type=&quot;month&quot; 星期：type=&quot;week&quot;
选取文件：type=&quot;file&quot;  它的multiple属性是可以一次选取多个文件
</code></pre>
<h1 id="3下拉列表">3：下拉列表</h1>
<p>以前使用select标签和option标签制作下拉列表，但是它不能让用户手动输入文本，新增了datalist的标签，结合input和option使用，必须与input的list属性进行关联绑定它可以使用户手动输入。<br>
所有主流浏览器都支持 <datalist> 标签，除了 Internet Explorer 和 Safari。<br>
<img src="https://jianmu123.github.io//post-images/1601529507046.png" alt="" loading="lazy"></p>
<h1 id="4表单的属性">4:表单的属性：</h1>
<pre><code class="language-javascript">placeholder :表单默认提示文本
autofocus:自动获取焦点
autocomplete:自动显示之前提交过的信息，赋值on：表示打开，赋值off，表示关闭，该属性还需要配合表单的name属性和提交控件，name属性需要赋予一个值，然后完成提交才会在下一次点击表单的时候
显示提交过的信息
requride:表示这个表单必须输入内容
pattern：给定一个正则表达式复习正则表达式：
* ：表示任意一个 
?：表示0个或则1个
+：表示1个或则多个
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1601362793168.png" alt="" loading="lazy"></figure>
<h1 id="5表单事件">5：表单事件</h1>
<p>oninput事件：监听当前指定元素的内容，只要内容有改变，便会触发该事件。<br>
onkeyup事件：键盘弹起触发，每弹起一次就会触发一次。<br>
oninvalid事件：当验证不通过的时候触发。这里提及一下setCustomValidity属性，可以设置提示文本。<br>
<img src="https://jianmu123.github.io//post-images/1601529982670.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery5]]></title>
        <id>https://jianmu123.github.io/post/jquery5/</id>
        <link href="https://jianmu123.github.io/post/jquery5/">
        </link>
        <updated>2020-09-24T13:30:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1jquery事件处理">1：jQuery事件处理</h2>
<h3 id="1-elementon方法可以绑定多个事件">1： element.on()方法可以绑定多个事件</h3>
<p>语法：element.on(event,[selector],fn);<br>
event是事件类型，[selector]是元素的子元素选择器<br>
您的浏览器不支持 video 标签。<br>
</video></p>
<pre><code class="language-javascript">    $(&quot;div&quot;).on({
        //鼠标经过div背景变红
        mouseenter：function(){
        $(&quot;this&quot;).css(&quot;background&quot;,&quot;red&quot;);
       },
       //鼠标点击div背景变粉红
      click：function(){
          $(&quot;this&quot;).css(&quot;background&quot;,&quot;pink&quot;);
      }
    })
</code></pre>
<p>on方法可以实现事件的委派。例如：</p>
<pre><code class="language-javascript">$(&quot;ul&quot;).on(click,&quot;li&quot;,function(){
    alert(&quot;触发了点击事件&quot;);
});
这个触发事件在ul上，但是触发对象在li上，即ul委托li帮他触发
</code></pre>
<h3 id="2off方法可以移除通过on方法添加的事件处理程序">2:off方法可以移除通过on方法添加的事件处理程序</h3>
<pre><code class="language-javascript"> $(&quot;p&quot;).off()  //解除p上所有的事件处理
 $(&quot;p&quot;).off(&quot;click&quot;) //解除p上的click事件处理
 $(&quot;ul&quot;).off(&quot;click&quot;，&quot;li&quot;) //解除事件委托
</code></pre>
<h3 id="3自动触发事件">3:自动触发事件</h3>
<p>有些事件希望自动触发，比如轮播图的自动播放能跟点击按钮一致，可以利用定时器自动触发按钮按钮点击事件，不必鼠标点击触发。<br>
第一种形式：元素.事件()<br>
第二种形式：元素.trigger(&quot;事件&quot;)<br>
第三种形式：元素.triggerHandler(&quot;事件&quot;)<br>
第三种和前面的区别：不会触发元素的默认行为，比如文本框焦点事件的光标此时不会闪烁</p>
<pre><code class="language-javascript">       下面代码不会有光标闪烁：
       $(&quot;input&quot;).on(&quot;focus&quot;,function(){
           $(&quot;this&quot;).val(&quot;你好吗&quot;);
       })
       $(&quot;input&quot;).triggerHandler(&quot;focus&quot;);//自动触发
</code></pre>
<h3 id="4阻止默认行为和冒泡行为">4：阻止默认行为和冒泡行为</h3>
<h4 id="41阻止默认行为eventpreventdefault-或则return-false">4.1:阻止默认行为：event.preventDefault(); 或则：return false</h4>
<h4 id="42阻止冒泡行为eventstoppropagation">4.2:阻止冒泡行为：event.stopPropagation()</h4>
<p>###5:jQuery对象拷贝<br>
语法：$.extend([deep],target,object1,[objectN]) //[objectN]是代表不仅可以拷贝一个还可以拷贝多个。<br>
<img src="https://jianmu123.github.io//post-images/1600956466981.png" alt="" loading="lazy"><br>
浅拷贝：会覆盖原来数据<br>
深拷贝：会保留原来是数据<br>
<img src="https://jianmu123.github.io//post-images/1600957628103.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600957634129.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery4]]></title>
        <id>https://jianmu123.github.io/post/jquery4/</id>
        <link href="https://jianmu123.github.io/post/jquery4/">
        </link>
        <updated>2020-09-23T13:07:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一jquery元素操作">一jQuery元素操作</h2>
<h3 id="1找父级元素可以通过parent方法但是当父级元素很多的时候可以使用partens方法该方法会获取到所有的祖先元素包括body和html结合siblings方法可以找到该元素所需要的祖先元素">1：找父级元素可以通过parent()方法，但是当父级元素很多的时候可以使用partens()方法，该方法会获取到所有的祖先元素，包括body和html，结合siblings()方法可以找到该元素所需要的祖先元素。</h3>
<pre><code class="language-javascript">  例如:
  var p = $(this).panrent(&quot;.quantity-form&quot;).parent(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html();等同于：  var p = $(this).parents(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html();
</code></pre>
<h3 id="2遍历">2:遍历</h3>
<p>隐式迭代是对同一类元素做了相同的操作，如果想要给同一类元素左不同的操作则需要使用遍历。<br>
遍历使用的是each()方法和$.each()方法。</p>
<h4 id="each方法主要使用在遍历dom对象比如标签">each()方法主要使用在遍历DOM对象，比如标签</h4>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1600867180840.png" alt="" loading="lazy"></figure>
<pre><code class="language-javascript">   $(&quot;div&quot;).each(function (index, domEle) {
          //回调函数的第一个参数一定是索引号，可以是自己定义的索引名称
          console.log(index); //结果： 0 1 2
          //回调函数的第二个参数一定是DOM对象,可以是自己定义的对象名称
          console.log(domEle); //结果：&lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt;
          //domEle.cc(&quot;color&quot;);//会报错，因为DOM对象没有css方法，因此需要转换成JQ对象
          $(&quot;domEle&quot;).css(&quot;color&quot;, &quot;bule&quot;);
        });
</code></pre>
<h4 id="each方法主要是来处理数据的比如数组-对象">$.each()方法：主要是来处理数据的，比如数组、对象。</h4>
<figure data-type="image" tabindex="2"><img src="https://jianmu123.github.io//post-images/1600868203421.png" alt="" loading="lazy"></figure>
<pre><code class="language-javascript">        var arr = [&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;]; //定义数组
        //遍历数组
        $.each(arr, function (index, domEle) {
          console.log(index); //打印索引0 1 2
          console.log(domEle); //打印arr内部值 blue red green
        });
        //遍历对象
        $.each(
          {
            name: &quot;孙悟空&quot;,
            age: 18,
          },
          function (i, ele) {
            console.log(i); //输出name age属性名
            console.log(ele); //输出顺悟空 18属性值
          }
        );
</code></pre>
<h3 id="3创建添加删除元素">3:创建添加删除元素</h3>
<p>创建语法：var li=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi mathvariant="normal">&quot;</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mo>&gt;</mo><mi mathvariant="normal">我</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">创</mi><mi mathvariant="normal">建</mi><mi mathvariant="normal">的</mi><mi>l</mi><mi>i</mi><mo>&lt;</mo><mi mathvariant="normal">/</mi><mi>l</mi><mi>i</mi><mo>&gt;</mo><mi mathvariant="normal">&quot;</mi><mo>)</mo><mo separator="true">;</mo><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">语</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">内</mi><mi mathvariant="normal">部</mi><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">：</mi><mo>(</mo><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">匹</mi><mi mathvariant="normal">配</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">子</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mo>)</mo><mi>e</mi><mi>l</mi><mi>e</mi><mi>l</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>n</mi><mi>d</mi><mo>(</mo><mo>)</mo><mi mathvariant="normal">方</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">匹</mi><mi mathvariant="normal">配</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">在</mi><mi>u</mi><mi>l</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">原</mi><mi mathvariant="normal">有</mi><mi>l</mi><mi>i</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi>l</mi><mi>i</mi><mi mathvariant="normal">使</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">：</mi></mrow><annotation encoding="application/x-tex">(&quot;&lt;li&gt;我是创建的li&lt;/li&gt;&quot;);
添加语法：内部添加：(添加后是匹配元素的子元素)
       elelment. append()方法，会添加到匹配元素的后面。在ul中原有li后面添加li使用方法：</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">&quot;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">创</span><span class="mord cjk_fallback">建</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">&quot;</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">语</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">：</span><span class="mopen">(</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">匹</span><span class="mord cjk_fallback">配</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mclose">)</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">匹</span><span class="mord cjk_fallback">配</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">在</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">有</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">：</span></span></span></span>(&quot;ul&quot;).append(li);<br>
elelment.prepend()方法，会添加到匹配元素的前面。在ul中原有li前面添加li使用方法：$(&quot;ul&quot;).prepend(li);<br>
外部添加：(添加后是匹配元素的兄弟元素)<br>
elelment.before()和 elelment.after()。<br>
删除元素:<br>
element.remove();删除匹配元素本身。<br>
element.empty();删除匹配元素集合中的所有子节点。<br>
element.html(&quot;&quot;);清空匹配元素内容。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery3]]></title>
        <id>https://jianmu123.github.io/post/jquery3/</id>
        <link href="https://jianmu123.github.io/post/jquery3/">
        </link>
        <updated>2020-09-22T12:45:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一jquery属性操作">一:jQuery属性操作</h2>
<p>###1：设置或获取元素固有属性值：prop()<br>
所谓元素固有属性值就是元素本身自带的属性，比如<a>标签中的herf。<br>
<img src="https://jianmu123.github.io//post-images/1600865423781.png" alt="" loading="lazy"></p>
<h3 id="2设置或获取元素自定义属性值attr">2：设置或获取元素自定义属性值：attr()</h3>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1600865617914.png" alt="" loading="lazy"></figure>
<h3 id="3数据缓存-data">3:数据缓存 data()</h3>
<p>data()方法可以在指定元素上存取数据，并不会修改DOM元素结构，一旦页面刷新，之前的存放的数据都会被移除<br>
<img src="https://jianmu123.github.io//post-images/1600866237557.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600866060662.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600866065161.png" alt="" loading="lazy"><br>
购物车案列（不含css部分）</p>
<pre><code class="language-javascript">  &lt;body&gt;
    &lt;div class=&quot;w&quot;&gt;
      &lt;div class=&quot;head&quot;&gt;
        &lt;!-- 全选模块 --&gt;
        &lt;div class=&quot;t-checkbox&quot;&gt;
          &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;checkall&quot; /&gt;全选
        &lt;/div&gt;
        &lt;div class=&quot;t-goods&quot;&gt;商品&lt;/div&gt;
        &lt;div class=&quot;t-price&quot;&gt;单价&lt;/div&gt;
        &lt;div class=&quot;t-num&quot;&gt;数量&lt;/div&gt;
        &lt;div class=&quot;t-sum&quot;&gt;小计&lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 商品模块 --&gt;
      &lt;div class=&quot;cart-item-list&quot;&gt;
        &lt;div class=&quot;cart-check&quot;&gt;
          &lt;div class=&quot;p-checkbox&quot;&gt;
            &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;j-checkbox&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;p-goodes&quot;&gt;
            &lt;div class=&quot;p-img&quot;&gt;
              &lt;!-- &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt; --&gt;
              洗衣粉
            &lt;/div&gt;
            &lt;div class=&quot;p-price&quot;&gt;￥12.60&lt;/div&gt;
            &lt;div class=&quot;p-num&quot;&gt;
              &lt;div class=&quot;quantity-form&quot;&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;decrement&quot;&gt;-&lt;/a&gt;
                &lt;input type=&quot;text&quot; class=&quot;itxt&quot; value=&quot;1&quot; style=&quot;width: 20px&quot; /&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;increment&quot;&gt;+&lt;/a&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;p-sum&quot;&gt;￥12.60&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;cart-item-list&quot;&gt;
        &lt;div class=&quot;cart-check&quot;&gt;
          &lt;div class=&quot;p-checkbox&quot;&gt;
            &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;j-checkbox&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;p-goodes&quot;&gt;
            &lt;div class=&quot;p-img&quot;&gt;
              &lt;!-- &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt; --&gt;
              消毒水
            &lt;/div&gt;
            &lt;div class=&quot;p-price&quot;&gt;￥15.20&lt;/div&gt;
            &lt;div class=&quot;p-num&quot;&gt;
              &lt;div class=&quot;quantity-form&quot;&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;decrement&quot;&gt;-&lt;/a&gt;
                &lt;input type=&quot;text&quot; class=&quot;itxt&quot; value=&quot;1&quot; style=&quot;width: 20px&quot; /&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;increment&quot;&gt;+&lt;/a&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;p-sum&quot;&gt;￥15.20&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;cart-item-list&quot;&gt;
        &lt;div class=&quot;cart-check&quot;&gt;
          &lt;div class=&quot;p-checkbox&quot;&gt;
            &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;j-checkbox&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;p-goodes&quot;&gt;
            &lt;div class=&quot;p-img&quot;&gt;
              &lt;!-- &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt; --&gt;
              吹风机
            &lt;/div&gt;
            &lt;div class=&quot;p-price&quot;&gt;￥30.50&lt;/div&gt;
            &lt;div class=&quot;p-num&quot;&gt;
              &lt;div class=&quot;quantity-form&quot;&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;decrement&quot;&gt;-&lt;/a&gt;
                &lt;input type=&quot;text&quot; class=&quot;itxt&quot; value=&quot;1&quot; style=&quot;width: 20px&quot; /&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;increment&quot;&gt;+&lt;/a&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;p-sum&quot;&gt;￥30.50&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 总计模块 --&gt;
      &lt;div class=&quot;cart-floatbar&quot;&gt;
        &lt;div class=&quot;select-all&quot;&gt;
          &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;checkall&quot; /&gt;全选
        &lt;/div&gt;
        &lt;div class=&quot;operation&quot;&gt;
          &lt;a href=&quot;javascript:;&quot; class=&quot;remove-batch&quot;&gt;删除选中的商品&lt;/a&gt;
          &lt;a href=&quot;javascript:;&quot; class=&quot;clear-all&quot;&gt;清除购物车&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class=&quot;toolbar-right&quot;&gt;
          &lt;div class=&quot;amount-sum&quot;&gt;总计&lt;em&gt; &lt;/em&gt;件商品&lt;/div&gt;
          &lt;div class=&quot;price-sum&quot;&gt;总价：&lt;em&gt;￥&lt;/em&gt;&lt;/div&gt;
          &lt;div class=&quot;btn-area&quot;&gt;
            &lt;a href=&quot;javascript:;&quot; style=&quot;color: red&quot;&gt;去结算&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;script&gt;
      //实现点击全选框，所有商品全选，或则手动点击了所有商品选中框，上面全选框也选上
      $(function () {
        //入口函数

        //1：全选点击单选框，可以用change事件
        $(&quot;.checkall&quot;).change(function () {
          //   var a = $(this).prop(&quot;checked&quot;);
          //   console.log(a);//结果是点击全选返回ture,证明已经获取到
          $(&quot;.j-checkbox, .checkall&quot;).prop(&quot;checked&quot;, $(this).prop(&quot;checked&quot;)); //下面的按钮根据全选的状态变化而变化
          //所有商品背景变化
          if ($(this).prop(&quot;checked&quot;)) {
            $(&quot;.cart-item-list&quot;).addClass(&quot;beijing&quot;);
          } else {
            $(&quot;.cart-item-list&quot;).removeClass(&quot;beijing&quot;);
          }
        });
        $(&quot;.j-checkbox&quot;).change(function () {
          //如果下面的复选框全部选中，则上面的全选也选中$(&quot;.j-checkbox&quot;).length是所有商品的单选框数量
          if ($(&quot;.j-checkbox:checked&quot;).length == $(&quot;.j-checkbox&quot;).length) {
            //.j-checkbox:checked可以知道到底有几个单选框被选中
            $(&quot;.checkall&quot;).prop(&quot;checked&quot;, true);
          } else {
            $(&quot;.checkall&quot;).prop(&quot;checked&quot;, false);
          }
          if ($(this).prop(&quot;checked&quot;)) {
            $(this).parents(&quot;.cart-item-list&quot;).addClass(&quot;beijing&quot;);
          } else {
            $(this).parents(&quot;.cart-item-list&quot;).removeClass(&quot;beijing&quot;);
          }
        });
        // 2：增减商品数量模块。核心思路：声明一个变量，当我们点击+/-的时候，就让这个值++/--，然后赋给文本框
        $(&quot;.increment&quot;).click(function () {
          //得到当前加/减的兄弟：文本框的值
          var n = $(this).siblings(&quot;.itxt&quot;).val(); //text文本使用val获取内容
          //   console.log(n);
          n++;
          $(this).siblings(&quot;.itxt&quot;).val(n);
          // 3: 根据商品数量自动计算价格,价格是加减号的父亲的父亲的兄弟
          var p = $(this).parents(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html();
          // console.log(p);
          p = p.substr(1) * n; //去掉索引为0的美元符号,截取后面的价格,然后队小计进行计算
          p = p.toFixed(2);
          // console.log(p);
          $(this)
            .parents(&quot;.p-num&quot;)
            .siblings(&quot;.p-sum&quot;)
            .html(&quot;￥&quot; + p);
          getSum();
        });
        //3:减：
        $(&quot;.decrement&quot;).click(function () {
          var n = $(this).siblings(&quot;.itxt&quot;).val(); //text文本使用val获取内容，非文本使用text()
          //   console.log(n);
          if (n &gt; 1) {
            n--;
          }
          $(this).siblings(&quot;.itxt&quot;).val(n);
          //  根据商品数量自动计算价格,价格是加减号的父亲的父亲的兄弟
          var p = $(this).parents(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html(); //获取到了价格
          // console.log(p);
          p = p.substr(1) * n; //去掉索引为0的美元符号,截取后面的价格,然后队小计进行计算
          p = p.toFixed(2);
          $(this)
            .parents(&quot;.p-num&quot;)
            .siblings(&quot;.p-sum&quot;)
            .html(&quot;￥&quot; + p);
          getSum();
        });
        //4:手动修改文本框的数值使小计跟着改变
        $(&quot;.itxt&quot;).change(function () {
          var m = $(this).val();
          // console.log(m);
          var p = $(this).parents(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html();
          p = p.substr(1) * m; //去掉索引为0的美元符号,截取后面的价格,然后队小计进行计算
          p = p.toFixed(2);
          $(this)
            .parents(&quot;.p-num&quot;)
            .siblings(&quot;.p-sum&quot;)
            .html(&quot;￥&quot; + p);
          getSum();
        });
        getSum(); //初始显示选中商品总数和总价
        //5:商品总数模块,定义一个函数，来遍历商品数量和总价
        function getSum() {
          var count = 0;
          var money = 0;
          //获取文本框数量,使用each遍历方法
          $(&quot;.itxt&quot;).each(function (index, ele) {
            //index是索引，ele是dom对象
            // console.log(index);
            // console.log($(ele));
            count += parseInt($(ele).val());
          });
          //修改总数量
          $(&quot;.amount-sum em&quot;).text(count);
          //获取总价
          $(&quot;.p-sum&quot;).each(function (index, ele) {
            money += parseFloat($(ele).text().substr(1));
            // console.log(sum);
            //修改总价钱
            $(&quot;.price-sum em&quot;).text(&quot;￥&quot; + money.toFixed(2));
          });
        }

        // 6:删除模块
        $(&quot;.remove-batch&quot;).click(function () {
          //删除复选框选中的商品
          $(&quot;.j-checkbox:checked&quot;).parents(&quot;.cart-item-list&quot;).remove();
          getSum();
        });
        //清空购物车模块
        $(&quot;.clear-all&quot;).click(function () {
          $(&quot;.cart-item-list&quot;).remove();
          getSum();
        });
      });
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery-2]]></title>
        <id>https://jianmu123.github.io/post/jquery-2/</id>
        <link href="https://jianmu123.github.io/post/jquery-2/">
        </link>
        <updated>2020-09-21T09:55:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一jquery的样式操作">一：jQuery的样式操作</h2>
<h3 id="1设置类样式方法">1：设置类样式方法</h3>
<p>作用等同于以前的classList，可以操作类样式，注意jQuery中的类参数不要加点。</p>
<pre><code class="language-javaScript">添加类：$(&quot;div&quot;).addClass(&quot;current&quot;);//这里是给div盒子添加current的类
删除类：$(&quot;div&quot;).removeClss(&quot;current&quot;);//这里是删除div盒子current的类
切换类：$(&quot;div&quot;).toggleClss(&quot;current&quot;);//这里是切换div盒子current的类
    &lt;script&gt;
      $(function () {
        //添加类addClass
        $(&quot;div&quot;).click(function () {
          $(this).addClass(&quot;current&quot;);
        });
        //删除类removeClass
        $(&quot;div&quot;).click(function () {
          $(this).removeClass(&quot;current&quot;);
        });
        //切换类toggleClass
        $(&quot;div&quot;).click(function () {
          $(this).toggleClass(&quot;current&quot;);
        });
      });
    &lt;/script&gt;
</code></pre>
<h3 id="2jquery的类操作是对指定类进行操作不会影响原先类名但是原生js中classname会覆盖元素里面原先的类名">2:jQuery的类操作是对指定类进行操作，不会影响原先类名，但是原生js中className会覆盖元素里面原先的类名。</h3>
<p>下面做一个菜单栏案例：点击菜单后该菜单的内容显示出来，单击其他菜单，之前显示的菜单隐藏。</p>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1600683854568.png" alt="" loading="lazy"></figure>
<h2 id="二jquery效果">二：jQuery效果</h2>
<h3 id="1显示隐藏-切换showspeedeasingcallback-hidespeedeasingcallback-togglespeedeasingcallback-注意这3个方法内部有方括号所以参数都可以不写">1：显示/隐藏 /切换：show([speed],[easing],[callback])  hide([speed],[easing],[callback]) toggle([speed],[easing],[callback])。注意这3个方法内部有方括号[],所以参数都可以不写。</h3>
<figure data-type="image" tabindex="2"><img src="https://jianmu123.github.io//post-images/1600773077471.png" alt="" loading="lazy"></figure>
<h3 id="2下拉上啦切换-slidedownslideupslidetoggle-内部参数与上方一样">2：下拉/上啦/切换: slideDown,slideUp,slideToggle。内部参数与上方一样。</h3>
<h3 id="3事件切换hoveroverout">3：事件切换：hover（[over],out）</h3>
<pre><code>           over:鼠标经过元素上触发，相当于mouseenter
           out:鼠标移出此元素要触发的函数，相当于mouseleave
</code></pre>
<p>区分概念：<br>
1.mouseover与mouseout成对，mouseenter与mouseleave成对<br>
2.mouseover触发优先级高于mouseenter，mouseout触发优先级mouseleave<br>
3.在父元素上绑定mouseover和mouseout事件，子元素同样也会触发，即子元素事件会冒泡至父元素；而父元素绑定mouseenter和mouseleave事件只对父元素有效，子元素不会触发。<br>
<img src="https://jianmu123.github.io//post-images/1600780157055.png" alt="" loading="lazy"></p>
<h3 id="4淡入淡出效果fadein-fadeout-fadetoggle-fadetospeedopacity-内部参数与上方一样">4：淡入淡出效果：fadeIn（）、fadeOut()、fadeToggle()、fadeTo(speed,opacity)。内部参数与上方一样。</h3>
<p><img src="https://jianmu123.github.io//post-images/1600780522485.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600780704256.png" alt="" loading="lazy"></p>
<h3 id="4自定义动画animateparamsspeed-easing-callback">4:自定义动画：animate(params，[speed]、[easing]、[callback])。</h3>
<p><img src="https://jianmu123.github.io//post-images/1600781058456.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600781151512.png" alt="" loading="lazy"></p>
<h3 id="5注意以上所有动画或效果都有动画队列的问题">5：注意以上所有动画或效果都有动画队列的问题。</h3>
<p>问题：动画或则效果一旦触发就会运行，但是当我们多次触发就会造成多个动画或效果的队列问题。<br>
解决办法：在添加stop()方法，把上一个动画效果停止（谁执行了动画效果就在谁前面添加）。<br>
<img src="https://jianmu123.github.io//post-images/1600781449952.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>