<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jianmu123.github.io/</id>
    <title>Personal blog</title>
    <updated>2020-09-28T14:05:08.404Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jianmu123.github.io/"/>
    <link rel="self" href="https://jianmu123.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jianmu123.github.io/images/avatar.png</logo>
    <icon>https://jianmu123.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Personal blog</rights>
    <entry>
        <title type="html"><![CDATA[jQuery5]]></title>
        <id>https://jianmu123.github.io/post/jquery5/</id>
        <link href="https://jianmu123.github.io/post/jquery5/">
        </link>
        <updated>2020-09-24T13:30:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1jquery事件处理">1：jQuery事件处理</h2>
<h3 id="1-elementon方法可以绑定多个事件">1： element.on()方法可以绑定多个事件</h3>
<p>语法：element.on(event,[selector],fn);<br>
event是事件类型，[selector]是元素的子元素选择器<br>
您的浏览器不支持 video 标签。<br>
</video></p>
<pre><code class="language-javascript">    $(&quot;div&quot;).on({
        //鼠标经过div背景变红
        mouseenter：function(){
        $(&quot;this&quot;).css(&quot;background&quot;,&quot;red&quot;);
       },
       //鼠标点击div背景变粉红
      click：function(){
          $(&quot;this&quot;).css(&quot;background&quot;,&quot;pink&quot;);
      }
    })
</code></pre>
<p>on方法可以实现事件的委派。例如：</p>
<pre><code class="language-javascript">$(&quot;ul&quot;).on(click,&quot;li&quot;,function(){
    alert(&quot;触发了点击事件&quot;);
});
这个触发事件在ul上，但是触发对象在li上，即ul委托li帮他触发
</code></pre>
<h3 id="2off方法可以移除通过on方法添加的事件处理程序">2:off方法可以移除通过on方法添加的事件处理程序</h3>
<pre><code class="language-javascript"> $(&quot;p&quot;).off()  //解除p上所有的事件处理
 $(&quot;p&quot;).off(&quot;click&quot;) //解除p上的click事件处理
 $(&quot;ul&quot;).off(&quot;click&quot;，&quot;li&quot;) //解除事件委托
</code></pre>
<h3 id="3自动触发事件">3:自动触发事件</h3>
<p>有些事件希望自动触发，比如轮播图的自动播放能跟点击按钮一致，可以利用定时器自动触发按钮按钮点击事件，不必鼠标点击触发。<br>
第一种形式：元素.事件()<br>
第二种形式：元素.trigger(&quot;事件&quot;)<br>
第三种形式：元素.triggerHandler(&quot;事件&quot;)<br>
第三种和前面的区别：不会触发元素的默认行为，比如文本框焦点事件的光标此时不会闪烁</p>
<pre><code class="language-javascript">       下面代码不会有光标闪烁：
       $(&quot;input&quot;).on(&quot;focus&quot;,function(){
           $(&quot;this&quot;).val(&quot;你好吗&quot;);
       })
       $(&quot;input&quot;).triggerHandler(&quot;focus&quot;);//自动触发
</code></pre>
<h3 id="4阻止默认行为和冒泡行为">4：阻止默认行为和冒泡行为</h3>
<h4 id="41阻止默认行为eventpreventdefault-或则return-false">4.1:阻止默认行为：event.preventDefault(); 或则：return false</h4>
<h4 id="42阻止冒泡行为eventstoppropagation">4.2:阻止冒泡行为：event.stopPropagation()</h4>
<p>###5:jQuery对象拷贝<br>
语法：$.extend([deep],target,object1,[objectN]) //[objectN]是代表不仅可以拷贝一个还可以拷贝多个。<br>
<img src="https://jianmu123.github.io//post-images/1600956466981.png" alt="" loading="lazy"><br>
浅拷贝：会覆盖原来数据<br>
深拷贝：会保留原来是数据<br>
<img src="https://jianmu123.github.io//post-images/1600957628103.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600957634129.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery4]]></title>
        <id>https://jianmu123.github.io/post/jquery4/</id>
        <link href="https://jianmu123.github.io/post/jquery4/">
        </link>
        <updated>2020-09-23T13:07:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一jquery元素操作">一jQuery元素操作</h2>
<h3 id="1找父级元素可以通过parent方法但是当父级元素很多的时候可以使用partens方法该方法会获取到所有的祖先元素包括body和html结合siblings方法可以找到该元素所需要的祖先元素">1：找父级元素可以通过parent()方法，但是当父级元素很多的时候可以使用partens()方法，该方法会获取到所有的祖先元素，包括body和html，结合siblings()方法可以找到该元素所需要的祖先元素。</h3>
<pre><code class="language-javascript">  例如:
  var p = $(this).panrent(&quot;.quantity-form&quot;).parent(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html();等同于：  var p = $(this).parents(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html();
</code></pre>
<h3 id="2遍历">2:遍历</h3>
<p>隐式迭代是对同一类元素做了相同的操作，如果想要给同一类元素左不同的操作则需要使用遍历。<br>
遍历使用的是each()方法和$.each()方法。</p>
<h4 id="each方法主要使用在遍历dom对象比如标签">each()方法主要使用在遍历DOM对象，比如标签</h4>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1600867180840.png" alt="" loading="lazy"></figure>
<pre><code class="language-javascript">   $(&quot;div&quot;).each(function (index, domEle) {
          //回调函数的第一个参数一定是索引号，可以是自己定义的索引名称
          console.log(index); //结果： 0 1 2
          //回调函数的第二个参数一定是DOM对象,可以是自己定义的对象名称
          console.log(domEle); //结果：&lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt;
          //domEle.cc(&quot;color&quot;);//会报错，因为DOM对象没有css方法，因此需要转换成JQ对象
          $(&quot;domEle&quot;).css(&quot;color&quot;, &quot;bule&quot;);
        });
</code></pre>
<h4 id="each方法主要是来处理数据的比如数组-对象">$.each()方法：主要是来处理数据的，比如数组、对象。</h4>
<figure data-type="image" tabindex="2"><img src="https://jianmu123.github.io//post-images/1600868203421.png" alt="" loading="lazy"></figure>
<pre><code class="language-javascript">        var arr = [&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;]; //定义数组
        //遍历数组
        $.each(arr, function (index, domEle) {
          console.log(index); //打印索引0 1 2
          console.log(domEle); //打印arr内部值 blue red green
        });
        //遍历对象
        $.each(
          {
            name: &quot;孙悟空&quot;,
            age: 18,
          },
          function (i, ele) {
            console.log(i); //输出name age属性名
            console.log(ele); //输出顺悟空 18属性值
          }
        );
</code></pre>
<h3 id="3创建添加删除元素">3:创建添加删除元素</h3>
<p>创建语法：var li=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi mathvariant="normal">&quot;</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mo>&gt;</mo><mi mathvariant="normal">我</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">创</mi><mi mathvariant="normal">建</mi><mi mathvariant="normal">的</mi><mi>l</mi><mi>i</mi><mo>&lt;</mo><mi mathvariant="normal">/</mi><mi>l</mi><mi>i</mi><mo>&gt;</mo><mi mathvariant="normal">&quot;</mi><mo>)</mo><mo separator="true">;</mo><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">语</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">内</mi><mi mathvariant="normal">部</mi><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">：</mi><mo>(</mo><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">匹</mi><mi mathvariant="normal">配</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">子</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mo>)</mo><mi>e</mi><mi>l</mi><mi>e</mi><mi>l</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>n</mi><mi>d</mi><mo>(</mo><mo>)</mo><mi mathvariant="normal">方</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">匹</mi><mi mathvariant="normal">配</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">在</mi><mi>u</mi><mi>l</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">原</mi><mi mathvariant="normal">有</mi><mi>l</mi><mi>i</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">添</mi><mi mathvariant="normal">加</mi><mi>l</mi><mi>i</mi><mi mathvariant="normal">使</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">：</mi></mrow><annotation encoding="application/x-tex">(&quot;&lt;li&gt;我是创建的li&lt;/li&gt;&quot;);
添加语法：内部添加：(添加后是匹配元素的子元素)
       elelment. append()方法，会添加到匹配元素的后面。在ul中原有li后面添加li使用方法：</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">&quot;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">创</span><span class="mord cjk_fallback">建</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">&quot;</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">语</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">：</span><span class="mopen">(</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">匹</span><span class="mord cjk_fallback">配</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mclose">)</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">匹</span><span class="mord cjk_fallback">配</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">在</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">有</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">添</span><span class="mord cjk_fallback">加</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">：</span></span></span></span>(&quot;ul&quot;).append(li);<br>
elelment.prepend()方法，会添加到匹配元素的前面。在ul中原有li前面添加li使用方法：$(&quot;ul&quot;).prepend(li);<br>
外部添加：(添加后是匹配元素的兄弟元素)<br>
elelment.before()和 elelment.after()。<br>
删除元素:<br>
element.remove();删除匹配元素本身。<br>
element.empty();删除匹配元素集合中的所有子节点。<br>
element.html(&quot;&quot;);清空匹配元素内容。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery3]]></title>
        <id>https://jianmu123.github.io/post/jquery3/</id>
        <link href="https://jianmu123.github.io/post/jquery3/">
        </link>
        <updated>2020-09-22T12:45:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一jquery属性操作">一:jQuery属性操作</h2>
<p>###1：设置或获取元素固有属性值：prop()<br>
所谓元素固有属性值就是元素本身自带的属性，比如<a>标签中的herf。<br>
<img src="https://jianmu123.github.io//post-images/1600865423781.png" alt="" loading="lazy"></p>
<h3 id="2设置或获取元素自定义属性值attr">2：设置或获取元素自定义属性值：attr()</h3>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1600865617914.png" alt="" loading="lazy"></figure>
<h3 id="3数据缓存-data">3:数据缓存 data()</h3>
<p>data()方法可以在指定元素上存取数据，并不会修改DOM元素结构，一旦页面刷新，之前的存放的数据都会被移除<br>
<img src="https://jianmu123.github.io//post-images/1600866237557.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600866060662.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600866065161.png" alt="" loading="lazy"><br>
购物车案列（不含css部分）</p>
<pre><code class="language-javascript">  &lt;body&gt;
    &lt;div class=&quot;w&quot;&gt;
      &lt;div class=&quot;head&quot;&gt;
        &lt;!-- 全选模块 --&gt;
        &lt;div class=&quot;t-checkbox&quot;&gt;
          &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;checkall&quot; /&gt;全选
        &lt;/div&gt;
        &lt;div class=&quot;t-goods&quot;&gt;商品&lt;/div&gt;
        &lt;div class=&quot;t-price&quot;&gt;单价&lt;/div&gt;
        &lt;div class=&quot;t-num&quot;&gt;数量&lt;/div&gt;
        &lt;div class=&quot;t-sum&quot;&gt;小计&lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 商品模块 --&gt;
      &lt;div class=&quot;cart-item-list&quot;&gt;
        &lt;div class=&quot;cart-check&quot;&gt;
          &lt;div class=&quot;p-checkbox&quot;&gt;
            &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;j-checkbox&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;p-goodes&quot;&gt;
            &lt;div class=&quot;p-img&quot;&gt;
              &lt;!-- &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt; --&gt;
              洗衣粉
            &lt;/div&gt;
            &lt;div class=&quot;p-price&quot;&gt;￥12.60&lt;/div&gt;
            &lt;div class=&quot;p-num&quot;&gt;
              &lt;div class=&quot;quantity-form&quot;&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;decrement&quot;&gt;-&lt;/a&gt;
                &lt;input type=&quot;text&quot; class=&quot;itxt&quot; value=&quot;1&quot; style=&quot;width: 20px&quot; /&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;increment&quot;&gt;+&lt;/a&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;p-sum&quot;&gt;￥12.60&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;cart-item-list&quot;&gt;
        &lt;div class=&quot;cart-check&quot;&gt;
          &lt;div class=&quot;p-checkbox&quot;&gt;
            &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;j-checkbox&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;p-goodes&quot;&gt;
            &lt;div class=&quot;p-img&quot;&gt;
              &lt;!-- &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt; --&gt;
              消毒水
            &lt;/div&gt;
            &lt;div class=&quot;p-price&quot;&gt;￥15.20&lt;/div&gt;
            &lt;div class=&quot;p-num&quot;&gt;
              &lt;div class=&quot;quantity-form&quot;&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;decrement&quot;&gt;-&lt;/a&gt;
                &lt;input type=&quot;text&quot; class=&quot;itxt&quot; value=&quot;1&quot; style=&quot;width: 20px&quot; /&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;increment&quot;&gt;+&lt;/a&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;p-sum&quot;&gt;￥15.20&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;cart-item-list&quot;&gt;
        &lt;div class=&quot;cart-check&quot;&gt;
          &lt;div class=&quot;p-checkbox&quot;&gt;
            &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;j-checkbox&quot; /&gt;
          &lt;/div&gt;
          &lt;div class=&quot;p-goodes&quot;&gt;
            &lt;div class=&quot;p-img&quot;&gt;
              &lt;!-- &lt;img src=&quot;&quot; alt=&quot;&quot; /&gt; --&gt;
              吹风机
            &lt;/div&gt;
            &lt;div class=&quot;p-price&quot;&gt;￥30.50&lt;/div&gt;
            &lt;div class=&quot;p-num&quot;&gt;
              &lt;div class=&quot;quantity-form&quot;&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;decrement&quot;&gt;-&lt;/a&gt;
                &lt;input type=&quot;text&quot; class=&quot;itxt&quot; value=&quot;1&quot; style=&quot;width: 20px&quot; /&gt;
                &lt;a href=&quot;javascript:;&quot; class=&quot;increment&quot;&gt;+&lt;/a&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;p-sum&quot;&gt;￥30.50&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- 总计模块 --&gt;
      &lt;div class=&quot;cart-floatbar&quot;&gt;
        &lt;div class=&quot;select-all&quot;&gt;
          &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; class=&quot;checkall&quot; /&gt;全选
        &lt;/div&gt;
        &lt;div class=&quot;operation&quot;&gt;
          &lt;a href=&quot;javascript:;&quot; class=&quot;remove-batch&quot;&gt;删除选中的商品&lt;/a&gt;
          &lt;a href=&quot;javascript:;&quot; class=&quot;clear-all&quot;&gt;清除购物车&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class=&quot;toolbar-right&quot;&gt;
          &lt;div class=&quot;amount-sum&quot;&gt;总计&lt;em&gt; &lt;/em&gt;件商品&lt;/div&gt;
          &lt;div class=&quot;price-sum&quot;&gt;总价：&lt;em&gt;￥&lt;/em&gt;&lt;/div&gt;
          &lt;div class=&quot;btn-area&quot;&gt;
            &lt;a href=&quot;javascript:;&quot; style=&quot;color: red&quot;&gt;去结算&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;script&gt;
      //实现点击全选框，所有商品全选，或则手动点击了所有商品选中框，上面全选框也选上
      $(function () {
        //入口函数

        //1：全选点击单选框，可以用change事件
        $(&quot;.checkall&quot;).change(function () {
          //   var a = $(this).prop(&quot;checked&quot;);
          //   console.log(a);//结果是点击全选返回ture,证明已经获取到
          $(&quot;.j-checkbox, .checkall&quot;).prop(&quot;checked&quot;, $(this).prop(&quot;checked&quot;)); //下面的按钮根据全选的状态变化而变化
          //所有商品背景变化
          if ($(this).prop(&quot;checked&quot;)) {
            $(&quot;.cart-item-list&quot;).addClass(&quot;beijing&quot;);
          } else {
            $(&quot;.cart-item-list&quot;).removeClass(&quot;beijing&quot;);
          }
        });
        $(&quot;.j-checkbox&quot;).change(function () {
          //如果下面的复选框全部选中，则上面的全选也选中$(&quot;.j-checkbox&quot;).length是所有商品的单选框数量
          if ($(&quot;.j-checkbox:checked&quot;).length == $(&quot;.j-checkbox&quot;).length) {
            //.j-checkbox:checked可以知道到底有几个单选框被选中
            $(&quot;.checkall&quot;).prop(&quot;checked&quot;, true);
          } else {
            $(&quot;.checkall&quot;).prop(&quot;checked&quot;, false);
          }
          if ($(this).prop(&quot;checked&quot;)) {
            $(this).parents(&quot;.cart-item-list&quot;).addClass(&quot;beijing&quot;);
          } else {
            $(this).parents(&quot;.cart-item-list&quot;).removeClass(&quot;beijing&quot;);
          }
        });
        // 2：增减商品数量模块。核心思路：声明一个变量，当我们点击+/-的时候，就让这个值++/--，然后赋给文本框
        $(&quot;.increment&quot;).click(function () {
          //得到当前加/减的兄弟：文本框的值
          var n = $(this).siblings(&quot;.itxt&quot;).val(); //text文本使用val获取内容
          //   console.log(n);
          n++;
          $(this).siblings(&quot;.itxt&quot;).val(n);
          // 3: 根据商品数量自动计算价格,价格是加减号的父亲的父亲的兄弟
          var p = $(this).parents(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html();
          // console.log(p);
          p = p.substr(1) * n; //去掉索引为0的美元符号,截取后面的价格,然后队小计进行计算
          p = p.toFixed(2);
          // console.log(p);
          $(this)
            .parents(&quot;.p-num&quot;)
            .siblings(&quot;.p-sum&quot;)
            .html(&quot;￥&quot; + p);
          getSum();
        });
        //3:减：
        $(&quot;.decrement&quot;).click(function () {
          var n = $(this).siblings(&quot;.itxt&quot;).val(); //text文本使用val获取内容，非文本使用text()
          //   console.log(n);
          if (n &gt; 1) {
            n--;
          }
          $(this).siblings(&quot;.itxt&quot;).val(n);
          //  根据商品数量自动计算价格,价格是加减号的父亲的父亲的兄弟
          var p = $(this).parents(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html(); //获取到了价格
          // console.log(p);
          p = p.substr(1) * n; //去掉索引为0的美元符号,截取后面的价格,然后队小计进行计算
          p = p.toFixed(2);
          $(this)
            .parents(&quot;.p-num&quot;)
            .siblings(&quot;.p-sum&quot;)
            .html(&quot;￥&quot; + p);
          getSum();
        });
        //4:手动修改文本框的数值使小计跟着改变
        $(&quot;.itxt&quot;).change(function () {
          var m = $(this).val();
          // console.log(m);
          var p = $(this).parents(&quot;.p-num&quot;).siblings(&quot;.p-price&quot;).html();
          p = p.substr(1) * m; //去掉索引为0的美元符号,截取后面的价格,然后队小计进行计算
          p = p.toFixed(2);
          $(this)
            .parents(&quot;.p-num&quot;)
            .siblings(&quot;.p-sum&quot;)
            .html(&quot;￥&quot; + p);
          getSum();
        });
        getSum(); //初始显示选中商品总数和总价
        //5:商品总数模块,定义一个函数，来遍历商品数量和总价
        function getSum() {
          var count = 0;
          var money = 0;
          //获取文本框数量,使用each遍历方法
          $(&quot;.itxt&quot;).each(function (index, ele) {
            //index是索引，ele是dom对象
            // console.log(index);
            // console.log($(ele));
            count += parseInt($(ele).val());
          });
          //修改总数量
          $(&quot;.amount-sum em&quot;).text(count);
          //获取总价
          $(&quot;.p-sum&quot;).each(function (index, ele) {
            money += parseFloat($(ele).text().substr(1));
            // console.log(sum);
            //修改总价钱
            $(&quot;.price-sum em&quot;).text(&quot;￥&quot; + money.toFixed(2));
          });
        }

        // 6:删除模块
        $(&quot;.remove-batch&quot;).click(function () {
          //删除复选框选中的商品
          $(&quot;.j-checkbox:checked&quot;).parents(&quot;.cart-item-list&quot;).remove();
          getSum();
        });
        //清空购物车模块
        $(&quot;.clear-all&quot;).click(function () {
          $(&quot;.cart-item-list&quot;).remove();
          getSum();
        });
      });
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery-2]]></title>
        <id>https://jianmu123.github.io/post/jquery-2/</id>
        <link href="https://jianmu123.github.io/post/jquery-2/">
        </link>
        <updated>2020-09-21T09:55:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一jquery的样式操作">一：jQuery的样式操作</h2>
<h3 id="1设置类样式方法">1：设置类样式方法</h3>
<p>作用等同于以前的classList，可以操作类样式，注意jQuery中的类参数不要加点。</p>
<pre><code class="language-javaScript">添加类：$(&quot;div&quot;).addClass(&quot;current&quot;);//这里是给div盒子添加current的类
删除类：$(&quot;div&quot;).removeClss(&quot;current&quot;);//这里是删除div盒子current的类
切换类：$(&quot;div&quot;).toggleClss(&quot;current&quot;);//这里是切换div盒子current的类
    &lt;script&gt;
      $(function () {
        //添加类addClass
        $(&quot;div&quot;).click(function () {
          $(this).addClass(&quot;current&quot;);
        });
        //删除类removeClass
        $(&quot;div&quot;).click(function () {
          $(this).removeClass(&quot;current&quot;);
        });
        //切换类toggleClass
        $(&quot;div&quot;).click(function () {
          $(this).toggleClass(&quot;current&quot;);
        });
      });
    &lt;/script&gt;
</code></pre>
<h3 id="2jquery的类操作是对指定类进行操作不会影响原先类名但是原生js中classname会覆盖元素里面原先的类名">2:jQuery的类操作是对指定类进行操作，不会影响原先类名，但是原生js中className会覆盖元素里面原先的类名。</h3>
<p>下面做一个菜单栏案例：点击菜单后该菜单的内容显示出来，单击其他菜单，之前显示的菜单隐藏。</p>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1600683854568.png" alt="" loading="lazy"></figure>
<h2 id="二jquery效果">二：jQuery效果</h2>
<h3 id="1显示隐藏-切换showspeedeasingcallback-hidespeedeasingcallback-togglespeedeasingcallback-注意这3个方法内部有方括号所以参数都可以不写">1：显示/隐藏 /切换：show([speed],[easing],[callback])  hide([speed],[easing],[callback]) toggle([speed],[easing],[callback])。注意这3个方法内部有方括号[],所以参数都可以不写。</h3>
<figure data-type="image" tabindex="2"><img src="https://jianmu123.github.io//post-images/1600773077471.png" alt="" loading="lazy"></figure>
<h3 id="2下拉上啦切换-slidedownslideupslidetoggle-内部参数与上方一样">2：下拉/上啦/切换: slideDown,slideUp,slideToggle。内部参数与上方一样。</h3>
<h3 id="3事件切换hoveroverout">3：事件切换：hover（[over],out）</h3>
<pre><code>           over:鼠标经过元素上触发，相当于mouseenter
           out:鼠标移出此元素要触发的函数，相当于mouseleave
</code></pre>
<p>区分概念：<br>
1.mouseover与mouseout成对，mouseenter与mouseleave成对<br>
2.mouseover触发优先级高于mouseenter，mouseout触发优先级mouseleave<br>
3.在父元素上绑定mouseover和mouseout事件，子元素同样也会触发，即子元素事件会冒泡至父元素；而父元素绑定mouseenter和mouseleave事件只对父元素有效，子元素不会触发。<br>
<img src="https://jianmu123.github.io//post-images/1600780157055.png" alt="" loading="lazy"></p>
<h3 id="4淡入淡出效果fadein-fadeout-fadetoggle-fadetospeedopacity-内部参数与上方一样">4：淡入淡出效果：fadeIn（）、fadeOut()、fadeToggle()、fadeTo(speed,opacity)。内部参数与上方一样。</h3>
<p><img src="https://jianmu123.github.io//post-images/1600780522485.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600780704256.png" alt="" loading="lazy"></p>
<h3 id="4自定义动画animateparamsspeed-easing-callback">4:自定义动画：animate(params，[speed]、[easing]、[callback])。</h3>
<p><img src="https://jianmu123.github.io//post-images/1600781058456.png" alt="" loading="lazy"><br>
<img src="https://jianmu123.github.io//post-images/1600781151512.png" alt="" loading="lazy"></p>
<h3 id="5注意以上所有动画或效果都有动画队列的问题">5：注意以上所有动画或效果都有动画队列的问题。</h3>
<p>问题：动画或则效果一旦触发就会运行，但是当我们多次触发就会造成多个动画或效果的队列问题。<br>
解决办法：在添加stop()方法，把上一个动画效果停止（谁执行了动画效果就在谁前面添加）。<br>
<img src="https://jianmu123.github.io//post-images/1600781449952.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery-1]]></title>
        <id>https://jianmu123.github.io/post/jquery1/</id>
        <link href="https://jianmu123.github.io/post/jquery1/">
        </link>
        <updated>2020-09-20T07:19:25.000Z</updated>
        <content type="html"><![CDATA[<p>一： jQuery的概述</p>
<h3 id="1-jquery是javascript的一个封装库里面存放了很多函数">1. jQuery是javaScript的一个封装库,里面存放了很多函数。</h3>
<h3 id="2-使用时只需调用这个库文件">2. 使用时只需调用这个库文件。</h3>
<h3 id="3-jquery主要是用来操作dom的">3. jQuery主要是用来操作DOM的。</h3>
<h3 id="4-学习jquery的本质是学习调用这些函数">4. 学习jQuery的本质是学习调用这些函数。</h3>
<h2 id="二jquery的基本使用">二：jQuery的基本使用</h2>
<h3 id="1首先官网下载jquery官网httpsjquerycom">1：首先官网下载[jQuery官网]{https://jquery.com/}</h3>
<h3 id="2符号是jquery的别称jquery中的顶级对象相当于javascript中的window对象">2：$符号是jQuery的别称，jQuery中的顶级对象，相当于javaScript中的window对象</h3>
<h3 id="3注意下列">3：注意下列：</h3>
<pre><code class="language-javaScript">//下面是jQuery入口函数
   &lt;script&gt;
      $(function () {
          //内容写这里
      });
    &lt;/script&gt;

 // 1:DOM 对象：用原生js方式获取的对象是DOM对象

   var myDiv = document.querySelector(&quot;div&quot;); //querySelector() 方法返回文档中匹配指定 CSS 选择器的一个元素。

   console.dir(myDiv); //打印所有的属性和方法

   // 2:jQuery 对象：用原生jQuery方式获取的对象是jQuery对象

   $(&quot;div&quot;);  // jQuery 对象

   console.dir($(&quot;div&quot;));

   //  从控制台可以看出2者打印的内容不同，jQuery打印了一个伪数组的形式

   // 3:jQuery对象只能使用jQuery方法,DOM对象只能使用原生javaScript属性和方法,2者不能混用
</code></pre>
<h3 id="4jquery对象和dom对象的相互转换">4：<strong>jQuery对象和DOM对象的相互转换</strong></h3>
<p>因为原生js比jQuery大，一些原生的js属性方法在jQuery中没有，所以需要把jQuery对象转换为DOM对象才可以使用。</p>
<pre><code class="language-javaScript">先用2种方式获取对象：
 var myDiv = document.querySelector(&quot;div&quot;);//DOM对象
 $(&quot;div&quot;);  // jQuery 对象
//jQuery转DOM(2种方式):
 $('div')[index];//index是索引号，因为jQuery对象是一个伪数组  
 $('div')get（index）;
//DOM转jQuery：
 $(myDiv);   
</code></pre>
<h2 id="三jquery的常用api">三：jQuery的常用API</h2>
<h3 id="1jquery基础选择器">1：jQuery基础选择器</h3>
<pre><code class="language-javaScript"> $('选择器')；//里面选择器直接写CSS选择器即可，但是要加引号。
</code></pre>
<table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ID选择器</td>
<td>$(&quot;#id&quot;)</td>
<td>获取指定的ID元素</td>
</tr>
<tr>
<td>全选选择器</td>
<td>$('*')</td>
<td>匹配所有元素</td>
</tr>
<tr>
<td>类选择器</td>
<td>$(&quot;.class&quot;)</td>
<td>获取同一类元素</td>
</tr>
<tr>
<td>标签选择器</td>
<td>$(&quot;div&quot;)</td>
<td>获取同一类标签的所有元素</td>
</tr>
<tr>
<td>并集选择器</td>
<td>$(&quot;div,p,li&quot;)</td>
<td>选取多个元素</td>
</tr>
<tr>
<td>交集选择器</td>
<td>$(&quot;li.current&quot;)</td>
<td>交集元素</td>
</tr>
</tbody>
</table>
<h4 id="2jquery设置css样式">2:jQuery设置css样式：</h4>
<pre><code class="language-javaScript"> $(&quot;div&quot;).css(&quot;属性&quot;,&quot;值&quot;);//例如：$(&quot;div&quot;).css(''background'',''red'');就把所有的div背景改为了红色
注意：这里的属性名一定要加引号

同时修改多个样式：使用对象的形式，注意这个时候属性名就不用加引号,加上也没错
$(&quot;div&quot;).css({
width:400,
height:400,
backgroundColor：&quot;red&quot;，
注意如果是复合属性就要写成驼峰命名法，如果值不是数字则必须使用引号
})
</code></pre>
<p>这个里面有一个<strong>隐式迭代</strong>的概念，他会把所有选取到的所有元素进行循环遍历，依次执行相应的方法。</p>
<h4 id="3jquery筛选选择器">3：jQuery筛选选择器</h4>
<table>
<thead>
<tr>
<th>语法</th>
<th>用法</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:firsr</td>
<td>$('li':first)</td>
<td>获取第一个li元素</td>
</tr>
<tr>
<td>:last</td>
<td>$('li:last')</td>
<td>获取最后一个li元素</td>
</tr>
<tr>
<td>:eq(index)</td>
<td>$(<strong>&quot;li:eq(2)&quot;</strong>)</td>
<td>获取到的li元素中，选择索引号为2的元素 (注意索引号是从0开始的)</td>
</tr>
<tr>
<td>:odd</td>
<td>$(<strong>&quot;li:odd&quot;</strong>)</td>
<td>获取到的li元素中，选择索引号为奇数的元素</td>
</tr>
<tr>
<td>:even</td>
<td>$(&quot;li:even&quot;)</td>
<td>获取到的li元素中，选择索引号为偶数的元素</td>
</tr>
</tbody>
</table>
<h4 id="4筛选方法注意方法都有括号">4：筛选方法（注意方法都有括号）</h4>
<figure data-type="image" tabindex="1"><img src="https://jianmu123.github.io//post-images/1600606470845.png" alt="" loading="lazy"></figure>
<h4 id="5注意下例的写法">5：注意下例的写法：</h4>
<pre><code class="language-javaScript">//让鼠标经过div使ul显示出来,this是当前元素(即:div)
  $(&quot;div&quot;).mousemove(function () {      
        $(this).children(&quot;ul&quot;).show();
      });
 //鼠标移出就隐藏
 $(&quot;div&quot;).mouseout(function(){
    $(this).children(&quot;ul&quot;).hide();
 })
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://jianmu123.github.io/post/about/</id>
        <link href="https://jianmu123.github.io/post/about/">
        </link>
        <updated>2020-09-19T10:27:03.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<p>本站是我的一个前端学习的博客，记录了我的前端学习的内容笔记，由于写博客的时候刚学jQuery，所以会从这里开始，你可以阅读我的笔记，如果可以帮助到你那我就非常开心😃。</p>
]]></content>
    </entry>
</feed>